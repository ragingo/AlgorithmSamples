#!/bin/bash

# Generate PR-friendly clang-tidy report

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CPP_DIR="$(dirname "$SCRIPT_DIR")"

echo "Generating clang-tidy report for PR..."

cd "$CPP_DIR" || exit 1

# Run clang-tidy and generate structured output
find . -path "./build" -prune -o -path "./_deps" -prune -o \
    \( -name "*.cpp" -o -name "*.hpp" -o -name "*.h" \) -type f -print | \
    while IFS= read -r file; do
        echo "Analyzing: $file"

        # Run clang-tidy on individual file
        clang-tidy "$file" \
            --checks="-*,modernize-*,readability-*,performance-*,bugprone-*,-clang-diagnostic-error" \
            --extra-arg=-std=c++23 \
            --extra-arg=-I. \
            --format-style=file 2>&1 | \
            grep -E "^.*\.(cpp|hpp|h):[0-9]+:[0-9]+: warning:" | \
            while IFS= read -r warning; do
                echo "LINT_WARNING: $warning"
            done
    done > lint_warnings.txt

# Count warnings
WARNING_COUNT=$(grep -c "LINT_WARNING:" lint_warnings.txt || echo "0")

echo "Found $WARNING_COUNT warnings"

# Generate summary for PR
echo "## 🔍 Clang-tidy Analysis Results" > pr_lint_summary.md
echo "" >> pr_lint_summary.md

if [ "$WARNING_COUNT" -gt 0 ]; then
    echo "Found **$WARNING_COUNT** code style/quality issues:" >> pr_lint_summary.md
    echo "" >> pr_lint_summary.md

    # Group by issue type and show most common issues
    echo "### 📊 Most Common Issues:" >> pr_lint_summary.md
    echo "" >> pr_lint_summary.md
    echo "| ルール | 件数 | 説明 |" >> pr_lint_summary.md
    echo "|--------|------|------|" >> pr_lint_summary.md

    grep "LINT_WARNING:" lint_warnings.txt | sed 's/LINT_WARNING: //' | \
        sed -E 's/.*\[([^]]*)\]$/\1/' | sort | uniq -c | sort -nr | head -5 | \
        while read count rule; do
            case "$rule" in
                "readability-identifier-length")
                    description="変数名が短すぎます (3文字以上推奨)"
                    ;;
                "modernize-use-trailing-return-type")
                    description="戻り値の型を後置にすることを推奨"
                    ;;
                "readability-identifier-naming")
                    description="変数名の命名規則に従っていません"
                    ;;
                "bugprone-easily-swappable-parameters")
                    description="引数の順序を間違えやすい構造です"
                    ;;
                "readability-function-size")
                    description="関数が大きすぎます"
                    ;;
                *)
                    description="コード品質の改善が必要です"
                    ;;
            esac
            echo "| \`$rule\` | $count | $description |" >> pr_lint_summary.md
        done

    echo "" >> pr_lint_summary.md
    echo "### 📝 Detailed Issues:" >> pr_lint_summary.md
    echo "" >> pr_lint_summary.md
    echo "| ファイル | 行 | 問題の説明 | ルール |" >> pr_lint_summary.md
    echo "|----------|----|-----------|---------| " >> pr_lint_summary.md

    # Process warnings and format as table rows
    grep "LINT_WARNING:" lint_warnings.txt | sed 's/LINT_WARNING: //' | \
        sed -E 's|^.*[/\\]([^/\\]+):([0-9]+):[0-9]+: warning: (.*) \[([^]]*)\]$|\1\t\2\t\3\t\4|' | \
        sort -u | head -10 | \
        while IFS=$'\t' read -r file line message rule; do
            echo "| \`$file\` | $line | $message | \`$rule\` |" >> pr_lint_summary.md
        done

    if [ "$WARNING_COUNT" -gt 10 ]; then
        echo "... and **$((WARNING_COUNT - 10))** more issues" >> pr_lint_summary.md
        echo "" >> pr_lint_summary.md
    fi

    echo "### 💡 Quick Fixes:" >> pr_lint_summary.md
    echo "" >> pr_lint_summary.md
    echo "Common issues and solutions:" >> pr_lint_summary.md
    echo "- **readability-identifier-length**: Use descriptive variable names (3+ chars)" >> pr_lint_summary.md
    echo "- **modernize-use-trailing-return-type**: Consider using \`auto function() -> type\` syntax" >> pr_lint_summary.md
    echo "- **modernize-use-nodiscard**: Add \`[[nodiscard]]\` to functions that return important values" >> pr_lint_summary.md
    echo "- **readability-function-cognitive-complexity**: Break down complex functions" >> pr_lint_summary.md
    echo "" >> pr_lint_summary.md
    echo "💡 **Tip**: Run \`bash cpp/scripts/lint.sh\` locally to see all issues with context." >> pr_lint_summary.md
else
    echo "🎉 **Great job!** No code style or quality issues found." >> pr_lint_summary.md
fi

echo "" >> pr_lint_summary.md
echo "---" >> pr_lint_summary.md
echo "*This comment was automatically generated by clang-tidy CI check.*" >> pr_lint_summary.md

echo "Report generated: pr_lint_summary.md"
